bsoup=bs4$BeautifulSoup(r$text,'html.parser')
tabl=bsoup$find_all('table')
result=list()
for(i in 1:9){
tabl_id=paste('Ponderation1_RPTLPonderation_ctl0','_LBCIsin',sep = toString(i))
id_=paste('Ponderation1_RPTLPonderation_ctl0','_LBCIsin1',sep = toString(i))
if(!is.null(bsoup$find('span',attrs = reticulate::dict('id' = tabl_id)))){
result=append(result,bsoup$find('span',attrs = reticulate::dict('id'= tabl_id)))
}
else {
result=append(result,bsoup$find('span',attrs = reticulate::dict('id'= id_)))
}
}
for(i in 10:55){
tabl_id=paste('Ponderation1_RPTLPonderation_ctl','_LBCIsin',sep = toString(i))
id_=paste('Ponderation1_RPTLPonderation_ctl','_LBCIsin1',sep = toString(i))
if(!is.null(bsoup$find('span',attrs = reticulate::dict('id' = tabl_id)))){
result=append(result,bsoup$find('span',attrs = reticulate::dict('id'= tabl_id)))
}
else {
result=append(result,bsoup$find('span',attrs = reticulate::dict('id'= id_)))
}
}
# les libelles
x=1
for(i in 1:9){
tabl_id=paste('Ponderation1_RPTLPonderation_ctl0','_LBLibelle',sep = toString(i))
id_=paste('Ponderation1_RPTLPonderation_ctl0','_LBLibelle1',sep = toString(i))
if(!is.null(bsoup$find('span',attrs = reticulate::dict('id' = tabl_id)))){
result[[x]]=append(result[[x]],bsoup$find('span',attrs = reticulate::dict('id'= tabl_id)))
x=x+1
}
else {
result[[x]]=append(result[[x]],bsoup$find('span',attrs = reticulate::dict('id'= id_)))
x=x+1
}
}
for(i in 10:55){
tabl_id=paste('Ponderation1_RPTLPonderation_ctl','_LBLibelle',sep = toString(i))
id_=paste('Ponderation1_RPTLPonderation_ctl','_LBLibelle1',sep = toString(i))
if(!is.null(bsoup$find('span',attrs = reticulate::dict('id' = tabl_id)))){
result[[x]]=append(result[[x]],bsoup$find('span',attrs = reticulate::dict('id'= tabl_id)))
x=x+1
}
else {
result[[x]]=append(result[[x]],bsoup$find('span',attrs = reticulate::dict('id'= id_)))
x=x+1
}
}
#Les titres
x=1
for(i in 1:9){
tabl_id=paste('Ponderation1_RPTLPonderation_ctl0','_LBNbreTitre',sep = toString(i))
id_=paste('Ponderation1_RPTLPonderation_ctl0','_LBNbreTitre1',sep = toString(i))
if(!is.null(bsoup$find('span',attrs = reticulate::dict('id' = tabl_id)))){
result[[x]]=append(result[[x]],bsoup$find('span',attrs = reticulate::dict('id'= tabl_id)))
x=x+1
}
else {
result[[x]]=append(result[[x]],bsoup$find('span',attrs = reticulate::dict('id'= id_)))
x=x+1
}
}
for(i in 10:55){
tabl_id=paste('Ponderation1_RPTLPonderation_ctl','_LBNbreTitre',sep = toString(i))
id_=paste('Ponderation1_RPTLPonderation_ctl','_LBNbreTitre1',sep = toString(i))
if(!is.null(bsoup$find('span',attrs = reticulate::dict('id' = tabl_id)))){
result[[x]]=append(result[[x]],bsoup$find('span',attrs = reticulate::dict('id'= tabl_id)))
x=x+1
}
else {
result[[x]]=append(result[[x]],bsoup$find('span',attrs = reticulate::dict('id'= id_)))
x=x+1
}
}
#Les cours
x=1
for(i in 1:9){
tabl_id=paste('Ponderation1_RPTLPonderation_ctl0','_LBCours',sep = toString(i))
id_=paste('Ponderation1_RPTLPonderation_ctl0','_LBCours1',sep = toString(i))
if(!is.null(bsoup$find('span',attrs = reticulate::dict('id' = tabl_id)))){
result[[x]]=append(result[[x]],bsoup$find('span',attrs = reticulate::dict('id'= tabl_id)))
x=x+1
}
else {
result[[x]]=append(result[[x]],bsoup$find('span',attrs = reticulate::dict('id'= id_)))
x=x+1
}
}
for(i in 10:55){
tabl_id=paste('Ponderation1_RPTLPonderation_ctl','_LBCours',sep = toString(i))
id_=paste('Ponderation1_RPTLPonderation_ctl','_LBCours1',sep = toString(i))
if(!is.null(bsoup$find('span',attrs = reticulate::dict('id' = tabl_id)))){
result[[x]]=append(result[[x]],bsoup$find('span',attrs = reticulate::dict('id'= tabl_id)))
x=x+1
}
else {
result[[x]]=append(result[[x]],bsoup$find('span',attrs = reticulate::dict('id'= id_)))
x=x+1
}
}
#Les flottants
x=1
for(i in 1:9){
tabl_id=paste('Ponderation1_RPTLPonderation_ctl0','_LBFactFlot',sep = toString(i))
id_=paste('Ponderation1_RPTLPonderation_ctl0','_LBFactFlot1',sep = toString(i))
if(!is.null(bsoup$find('span',attrs = reticulate::dict('id' = tabl_id)))){
result[[x]]=append(result[[x]],bsoup$find('span',attrs = reticulate::dict('id'= tabl_id)))
x=x+1
}
else {
result[[x]]=append(result[[x]],bsoup$find('span',attrs = reticulate::dict('id'= id_)))
x=x+1
}
}
for(i in 10:55){
tabl_id=paste('Ponderation1_RPTLPonderation_ctl','_LBFactFlot',sep = toString(i))
id_=paste('Ponderation1_RPTLPonderation_ctl','_LBFactFlot1',sep = toString(i))
if(!is.null(bsoup$find('span',attrs = reticulate::dict('id' = tabl_id)))){
result[[x]]=append(result[[x]],bsoup$find('span',attrs = reticulate::dict('id'= tabl_id)))
x=x+1
}
else {
result[[x]]=append(result[[x]],bsoup$find('span',attrs = reticulate::dict('id'= id_)))
x=x+1
}
}
#Les plafonnements
x=1
for(i in 1:9){
tabl_id=paste('Ponderation1_RPTLPonderation_ctl0','_LBFactPlaf',sep = toString(i))
id_=paste('Ponderation1_RPTLPonderation_ctl0','_LBFactPlaf1',sep = toString(i))
if(!is.null(bsoup$find('span',attrs = reticulate::dict('id' = tabl_id)))){
result[[x]]=append(result[[x]],bsoup$find('span',attrs = reticulate::dict('id'= tabl_id)))
x=x+1
}
else {
result[[x]]=append(result[[x]],bsoup$find('span',attrs = reticulate::dict('id'= id_)))
x=x+1
}
}
for(i in 10:55){
tabl_id=paste('Ponderation1_RPTLPonderation_ctl','_LBFactPlaf',sep = toString(i))
id_=paste('Ponderation1_RPTLPonderation_ctl','_LBFactPlaf1',sep = toString(i))
if(!is.null(bsoup$find('span',attrs = reticulate::dict('id' = tabl_id)))){
result[[x]]=append(result[[x]],bsoup$find('span',attrs = reticulate::dict('id'= tabl_id)))
x=x+1
}
else {
result[[x]]=append(result[[x]],bsoup$find('span',attrs = reticulate::dict('id'= id_)))
x=x+1
}
}
#Les flottants
x=1
for(i in 1:9){
tabl_id=paste('Ponderation1_RPTLPonderation_ctl0','_LBCapitFlot',sep = toString(i))
id_=paste('Ponderation1_RPTLPonderation_ctl0','_LBCapitFlot1',sep = toString(i))
if(!is.null(bsoup$find('span',attrs = reticulate::dict('id' = tabl_id)))){
result[[x]]=append(result[[x]],bsoup$find('span',attrs = reticulate::dict('id'= tabl_id)))
x=x+1
}
else {
result[[x]]=append(result[[x]],bsoup$find('span',attrs = reticulate::dict('id'= id_)))
x=x+1
}
}
for(i in 10:55){
tabl_id=paste('Ponderation1_RPTLPonderation_ctl','_LBCapitFlot',sep = toString(i))
id_=paste('Ponderation1_RPTLPonderation_ctl','_LBCapitFlot1',sep = toString(i))
if(!is.null(bsoup$find('span',attrs = reticulate::dict('id' = tabl_id)))){
result[[x]]=append(result[[x]],bsoup$find('span',attrs = reticulate::dict('id'= tabl_id)))
x=x+1
}
else {
result[[x]]=append(result[[x]],bsoup$find('span',attrs = reticulate::dict('id'= id_)))
x=x+1
}
}
#Les poids
x=1
for(i in 1:9){
tabl_id=paste('Ponderation1_RPTLPonderation_ctl0','_LBPoids',sep = toString(i))
id_=paste('Ponderation1_RPTLPonderation_ctl0','_LBPoids1',sep = toString(i))
if(!is.null(bsoup$find('span',attrs = reticulate::dict('id' = tabl_id)))){
result[[x]]=append(result[[x]],bsoup$find('span',attrs = reticulate::dict('id'= tabl_id)))
x=x+1
}
else {
result[[x]]=append(result[[x]],bsoup$find('span',attrs = reticulate::dict('id'= id_)))
x=x+1
}
}
for(i in 10:55){
tabl_id=paste('Ponderation1_RPTLPonderation_ctl','_LBPoids',sep = toString(i))
id_=paste('Ponderation1_RPTLPonderation_ctl','_LBPoids1',sep = toString(i))
if(!is.null(bsoup$find('span',attrs = reticulate::dict('id' = tabl_id)))){
result[[x]]=append(result[[x]],bsoup$find('span',attrs = reticulate::dict('id'= tabl_id)))
x=x+1
}
else {
result[[x]]=append(result[[x]],bsoup$find('span',attrs = reticulate::dict('id'= id_)))
x=x+1
}
}
code=list()
for(sp in result){
for(i in 1:8){
code=append(code,sp[[i]]$text)
}
}
li=list(" ","Total ",
bsoup$find('span', attrs=reticulate::dict('id'= 'Ponderation1_RPTLPonderation_ctl56_LBTotalTitre'))$text,
" "," "," ",
bsoup$find('span',attrs=reticulate::dict('id'="Ponderation1_RPTLPonderation_ctl56_LBTotalCapitalisation"))$text,
" ")
code=append(code,li)
columns=list('Code Isin','Instrument','Nombre de titres','Cours','Facteur flottant',
'Facteur de plafonnement','Capitalisation flottante','Poids')
df=matrix(code,nrow = 8)
df=t(df)
colnames(df)=columns
df=data.frame(df)
return(df)
}
#' Title
#'
#' @param ticker put ticker
#' @param from from date
#' @param to to date
#'
#' @return data frame
#' @export
daily.data=function(ticker,from,to){
pd=reticulate::import("pandas")
requests=reticulate::import("requests")
json=reticulate::import("json")
datetime=reticulate::import("datetime")
sys=reticulate::import('sys')
warnings=reticulate::import("warnings")
codecs=reticulate::import("codecs")
dat=reticulate::dict ('ADH' = "MA0000011512", "AFM"= "MA0000012296", "AFI"= "MA0000012114","GAZ"= "MA0000010951",
"AGM"= "MA0000010944", "ADI"= "MA0000011819", "ALM"= "MA0000010936",
"ARD"= "MA0000012460", "ATL"= "MA0000011710", "ATW"= "MA0000012445", "ATH"= "MA0000010969",
"NEJ"= "MA0000011009", "BAL"= "MA0000011991", "BOA"= "MA0000012437",
"BCP"= "MA0000011884", "BCI"= "MA0000010811", "CRS"= "MA0000011868", "CDM"= "MA0000010381",
"CDA"= "MA0000012049", "CIH"= "MA0000011454", "CMA"= "MA0000010506",
"CMT"= "MA0000011793", "COL"= "MA0000011934", "CSR"= "MA0000012247", "CTM"= "MA0000010340",
"DRI"= "MA0000011421", "DLM"= "MA0000011777", "DHO"= "MA0000011850",
"DIS"= "MA0000010639", "DWY"= "MA0000011637", "NKL"= "MA0000011942", "EQD"= "MA0000010357",
"FBR"= "MA0000011587", "HPS"= "MA0000011611", "IBC"= "MA0000011132",
"IMO"= "MA0000012387", "INV"= "MA0000011579", "JET"= "MA0000012080",
"LBV"= "MA0000011801", "LHM"= "MA0000012320", "LES"= "MA0000012031", "LYD"= "MA0000011439",
"M2M"= "MA0000011678", "MOX"= "MA0000010985", "MAB"= "MA0000011215", "MNG"= "MA0000011058",
"MLE"= "MA0000010035", "IAM"= "MA0000011488", "MDP"= "MA0000011447",
"MIC"= "MA0000012163", "MUT"= "MA0000012395", "NEX"= "MA0000011140", "OUL"= "MA0000010415",
"PRO"= "MA0000011660", "REB"= "MA0000010993", "RDS"= "MA0000012239",
"RISMA"="MA0000011462","S2M"= "MA0000012106", "SAH"= "MA0000012007", "SLF"= "MA0000011744",
"SAM"="MA0000010803", "SMI"= "MA0000010068", "SNA"= "MA0000011843",
"SNP"="MA0000011728", "MSA"= "MA0000012312", "SID"= "MA0000010019", "SOT"= "MA0000012502",
"SRM"="MA0000011595", "SBM"= "MA0000010365", "STR"= "MA0000012056",
"TQM"= "MA0000012205", "TIM"= "MA0000011686", "TMA"= "MA0000012262", "UMR"= "MA0000012023",
"WAA"= "MA0000010928", "ZDJ"= "MA0000010571")
CodeValeur =reticulate::dict("ADH" = "9000" , "AFM" = "12200" , "AFI" = "11700" , "GAZ" = "7100" , "AGM" = "6700" ,
"ADI" = "11200" , "ALM" = "6600" , "ARD" = "27" , "ATL" = "10300" , "ATW" = "8200" , "ATH" = "3200" ,
"NEJ" = "7000" , "BAL" = "3300" , "BOA" = "1100" , "BCP" = "8000" , "BCI" = "5100" , "CRS" = "8900" ,
"CDM" = "3600" , "CDA" = "3900" , "CIH" = "3100" , "CMA" = "4000" , "CMT" = "11000" , "COL" = "9200" ,
"CSR" = "4100" , "CTM" = "2200" , "DRI" = "8500" , "DLM" = "10800" , "DHO" = "10900" , "DIS" = "4200" ,
"DWY" = "9700" , "NKL" = "11300" , "EQD" = "2300" , "FBR" = "9300" , "HPS" = "9600" , "IBC" = "7600" ,
"IMO" = "12" , "INV" = "9500" , "JET" = "11600" , "LBV" = "11100" , "LHM" = "3800" , "LES" = "4800" ,
"LYD" = "8600" , "M2M" = "10000" , "MOX" = "7200" , "MAB" = "1600" , "MNG" = "7300" , "MLE" = "2500" ,
"IAM" = "8001" , "MDP" = "6500" , "MIC" = "10600" , "MUT" = "21" , "NEX" = "7400" , "OUL" = "5200" ,
"PRO" = "9900" , "REB" = "5300" , "RDS" = "12000" , "RISMA" = "8700" , "S2M" = "11800" ,
"SAH" = "11400" , "SLF" = "10700" , "SAM" = "6800" , "SMI" = "1500" , "SNA" = "10500" ,
"SNP" = "9400" , "MSA" = "12300" , "SID" = "1300" , "SOT" = "9800" , "SRM" = "2000" ,
"SBM" = "10400" , "STR" = "11500" , "TQM" = "11900" , "TIM" = "10100" , "TMA" = "12100" , "UMR" = "7500" ,
"WAA" = "6400" , "ZDJ" = "5800")
isin=dat[ticker]
link=paste('https://www.leboursier.ma/api?method=getPriceHistory&ISIN=','&format=json&from=',sep = toString(isin))
link=paste(link,'&to=',sep = toString(from))
link=paste0(link,toString(to))
r=requests$get(link)
c=codecs$encode(r$text)
c=c$decode('UTF-8-SIG')
data=json$loads(c)
df0=pd$io$json$json_normalize(data)
df = pd$DataFrame(df0$result)
df=t(df)
Date=rep(list(NULL),length(df))
Value=rep(list(NULL),length(df))
Min=rep(list(NULL),length(df))
Max=rep(list(NULL),length(df))
Variation=rep(list(NULL),length(df))
Volume=rep(list(NULL),length(df))
for(i in 1:length(df)){
Date[[i]]=df[[i]]$date
Value[[i]]=df[[i]]$value
Min[[i]]=df[[i]]$min
Max[[i]]=df[[i]]$max
Variation[[i]]=df[[i]]$variation
Volume[[i]]=df[[i]]$volume
}
Date=matrix(Date)
Value=matrix(Value)
Min=matrix(Min)
Max=matrix(Max)
Variation=matrix(Variation)
Volume=matrix(Volume)
df=data.frame(Date,Value,Min,Max,Variation,Volume)
rownames(df)=df$Date
df=df[,-1]
row.names(df)=Date=as.Date(rownames(df),'%d/%m/%Y')
return(df)
}
iam=daily.data('IAM','01-01-2017','01-01-2021')
iam
View(iam)
ctm=daily.data('CTM','01-01-2017','01-01-2021')
View(ctm)
adh=daily.data('ADH','01-01-2017','01-01-2021')
tail(adh)
adh=daily.data('ADH','01-01-2017','10-12-2021')
tail(adh)
library(casabourse)
library(casabourse)
masi=gsheet2tbl("https://docs.google.com/spreadsheets/d/10BxmdDLzWHV2WOIYwSewp-G_gs-XOxvxFoZc5DWUAqk/edit?usp=sharing")
View(masi)
df=gsheet2tbl("https://docs.google.com/spreadsheets/d/1OepCwQ1w4htUL5YvIiCMUAR3KCICdACKouy2uppii0Y/edit?usp=sharing")
View(df)
df=df[-77,]
df=df[-2,]
df=df[,-seq(1,16,by=2)]
colnames(df)=df[1,]
df=df[-1,]
View(masi)
trans=gsheet2tbl("https://docs.google.com/spreadsheets/d/10BxmdDLzWHV2WOIYwSewp-G_gs-XOxvxFoZc5DWUAqk/edit?usp=sharing")
construct_download_url <- function(url, format='csv', sheetid = NULL){
key <- stringr::str_extract(url, '[[:alnum:]_-]{30,}')
if(is.null(sheetid) & stringr::str_detect(url, 'gid=[[:digit:]]+')){
sheetid <- as.numeric(stringr::str_extract(stringr::str_extract(url,'gid=[[:digit:]]+'),'[[:digit:]]+'))
}
address <- paste0('https://docs.google.com/spreadsheets/export?id=',key,'&format=',format)
if(!is.null(sheetid)){
address <- paste0(address, '&gid=', sheetid)
}
return(address)
}
#Scraping data.frame from Google Sheet link
#' gsheet2tbl
#'
#' @param url link
#' @param sheetid bool default TRUE
#' @return data.frame
#' @export
gsheet2tbl <- function(url, sheetid = NULL){
if(requireNamespace('readr', quietly=TRUE)){
suppressMessages(table <- readr::read_csv(file = construct_download_url(url, format='csv', sheetid = NULL)))
}else{
table <- utils::read.csv(text=gsheet2text(url=url, format='csv', sheetid=sheetid), stringsAsFactors=FALSE)
class(table) <- c("tbl_df", "tbl", "data.frame")
}
return(table)
}
#Scraping text from Google Sheet link
#' gsheet2txt
#'
#' @param url link
#' @param format a format like csv...
#' @param sheetid bool default TRUE
#'
#' @return text
#' @export
gsheet2text <- function(url, format='csv', sheetid = NULL){
address <- construct_download_url(url=url, format=format, sheetid = sheetid)
page <- httr::GET(address)
if(stringr::str_detect(page$headers$`content-type`, stringr::fixed('text/html'))){
stop("Unable to retrieve document. Is 'share by link' enabled for this sheet?")
}
content <- httr::content(page, as='text')
return(content)
}
trans=gsheet2tbl("https://docs.google.com/spreadsheets/d/10BxmdDLzWHV2WOIYwSewp-G_gs-XOxvxFoZc5DWUAqk/edit?usp=sharing")
View(trans)
trans=trans[,-seq(1,9,2)]
trans=na.omit(trans)
rownames(trans)=trans[1,]
colnames(trans)=trans[1,]
trans=trans[-1,]
today.transactions=function(){
trans=gsheet2tbl("https://docs.google.com/spreadsheets/d/10BxmdDLzWHV2WOIYwSewp-G_gs-XOxvxFoZc5DWUAqk/edit?usp=sharing")
trans=trans[,-seq(1,9,2)]
trans=na.omit(trans)
colnames(trans)=trans[1,]
trans=trans[-1,]
return(trans)
}
trans=today.transactions()
View(trans)
trans
as.numeric(trans$Cours)
trans=today.transactions()
trans
as.numeric(trans$Cours)
devtools::check_win_devel()
reticulate::miniconda_update()
devtools::check_win_devel()
devtools::check_win_devel()
devtools::check_win_devel()
usethis::use_cran_comments()
devtools::check_win_devel()
devtools::check_rhub()
roxygen2::vignette_roclet()
usethis::use_vignette("casabourse_pkg",title = "Introduction to casabourse")
devtools::check_win_devel()
library(casabourse)
remove.packages("casabourse")
library(casabourse)
devtools::check_win_devel()
devtools::submit_cran()
library(reticulate)
miniconda_update()
devtools::check_win_devel()
usethis::use_cran_comments()
usethis::use_cran_comments()
usethis::use_cran_comments()
usethis::use_cran_comments()
devtools::submit_cran()
_R_CHECK_CRAN_INCOMING_
R_CHECK_CRAN_INCOMING_
library(devtools)
checkCRAN()
?release
release("_R_CHECK_CRAN_INCOMING_USE_ASPELL_" = T)
release("_R_CHECK_CRAN_INCOMING_USE_ASPELL_" = TRUE)
release(_R_CHECK_CRAN_INCOMING_USE_ASPELL_= TRUE)
R.version
update(R)
release()
release()
spell_check()
spell_check()
check_mac_release()
reticulate::py_config()
local({
r <- getOption("repos")
r["CRAN"] <- " http://cran.rstudio.com "
options(dépôts = r)
})
local()
local({
+     r <- getOption("repos")
+     r["CRAN"] <- " http://cran.rstudio.com "
+     options(dépôts = r) })
use_cran_comments()
use_cran_comments()
release()
submit_cran()
use_cran_comments()
use_cran_comments()
use_pkgdown()
library(pkgdown)
build_site()
submit_cran()
submit_cran()
check_rhub()
rhub::validate_email("abdouloudoussdiakite@gmail.com")
check_rhub()
check_rhub()
check_rhub()
rhub::validate_email()
check_rhub()
rhub::validate_email()
check_rhub()
library(casabourse)
to= today.prizelist("up")
View(to)
to= today.prizelist("down")
market=today.market()
View(market)
masi=masi.data()
View(masi)
casabourse::instruments()
ma=gsheet2tbl("https://docs.google.com/spreadsheets/d/1OZaY597nxsKqHHDw0q-cF8xrCm9u-SABlW2zGhyM-g8/edit?usp=sharing")
View(ma)
ma=ma[,-seq(1,15,2)]
ma=na.omit(ma)
colnames(ma)=ma[1,]
ma=ma[-1,]
rhub::check()
rhub::check_rhub()
library(pkgdown)
use_pkgdown()
rhub::check_rhub()
check_rhub()
library(pkgdown)
check_rhub()
rhub::check_on_windows()
rhub::check_for_cran()
checkCRAN()
>
q()
check_rhub()
rhub::check_for_cran()
rhub::check_for_cran()
rhub::check_for_cran()
rhub::check_for_cran()
rhub::check_for_cran()
rhub::check_for_cran()
rhub::check_for_cran()
rhub::check_for_cran()
rhub::validate_email()
rhub::check_for_cran()
